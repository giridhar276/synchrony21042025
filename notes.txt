python tools
-----------
IDLE ( basic)  
vs code
eclipse
pycharm
google colab ( web tool)

anaconda ( general purpose but mainly used for analytics)
---------
spyder IDE
jupyter notebook
orange visualization tools



coding,automation
-------------------
spyder
vs code


analytics/ML
-----------
jupyter notebook ( comes with anaconada)
google colab


C  - datatypes
---
int a = 10;
float b = 34.43;
char
double
long
short


** Everything in python is object **
** Every object contains methods **

python - objects
----------------
number
string
list
tuple
dictionary
set


number  ( 45, 45.43)
------
number can be integer, decimal , octal or hexadecimal.

val = 10
aval = 3.43


string
------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "java programming"
cname = """unix shell scripting"""


list ( array in C)
----------------
list is collection of elements.
Elements can be numbers,strings, lists, tuple or dictionary.

alist = [10,20,30,40,435,32]
blist = ["pyhon","java","unix"]
clist = [10,"java","oracle",443.3]
dlist = [[10,20],["unix","java"],[50,60]] # list of lists


tuple ( read only , immutable , unchangeable , uneditable)
------
tuple is collection of elements.
Elements can be numbers,strings, lists, tuple or dictionary.
**** Elements inside tuple CANT be modified directly ****

atup = (10,20,340,40)
btup = ("java",45,5.4,"java")


abc.csv    101,raj,s,hyderabad
abc.log 
abc.txt
abc.json  - keys values

dictionary ( json  hash  hashmap  associativearray)
----------
dictionary contains key and values.
In dictionary keys are unique.
              key would be number,string.
** Indexing is NOT allowed in dictionary ***
book - index
-----
chap1 10
chap2 20
chap3 30
chap4 40
chap5 40

syntax:   object = { key:value , key:value , key:value }
example:    book = {"chap1":10 , "chap2":20,"chap3":30 }
            data = {1:2,3:4,5:6}
          bookinfo={"chap1":["rita","US"],"chap2":["sita","UK"]}


set ( venn diagrams)
----
set is UNORDERED collection of UNIQUE elemenets of SAME type.

aset = {10,10,10,20,30,30}


name =  'python'
name[1]

list  [10,20,30]
alist[2]

tuple ()
dict  {key:value , key:value}
set   {10,20,30}



conditional statements
---------------------
simple if
if-else 
if-elif-elif-elif-elif..else



level1
level1
level1
if cond:
    level2
    level2
    level2
    level2
else:
    level2
    level2
    level2


#day2
-----
covering tuple,dictionary,set methods in detail first
working examples on above topics
builtin functions
userdefined functions
file handling




#####################

data = {
    "glossary": {
        "title": "example glossary",
		"GlossDiv": {
            "title": "S",
			"GlossList": {
                "GlossEntry": {
                    "ID": "SGML",
					"SortAs": "SGML",
					"GlossTerm": "Standard Generalized Markup Language",
					"Acronym": "SGML",
					"Abbrev": "ISO 8879:1986",
					"GlossDef": {
                        "para": "A meta-markup language, used to create markup languages such as DocBook.",
						"GlossSeeAlso": ["GML", "XML"]
                    },
					"GlossSee": "markup"
                }
            }
        }
    }
}

#Standard Generalized Markup Language
print(data['glossary']['GlossDiv']['GlossList']['GlossEntry']['GlossTerm'])

#XML
print(data['glossary']['GlossDiv']['GlossList']['GlossEntry']['GlossDef']['GlossSeeAlso'][1])

######################
colors = [
{
"colors": "red",
"values": "#f00"
},
{
"colors": "green",
"values": "#0f0"
},
{
"colors": "blue",
"values": "#00f"
},
{
"colors": "cyan",
"values": "#0ff"
},
{
"colors": "magenta",
"values": "#f0f"
},
{
"colors": "yellow",
"values": "#ff0"
},
{
"colors": "black",
"values": "#000"
}
]


write a program to display all the colors and its values.

sample output :

red #f00
green #0f0
yellow  #ff0
magenta #f0f
..
..
..



# if you want to check the type of object ...
print(type(colors))
print(isinstance(colors,list)) #True
print(isinstance(colors,dict)) #False


for item in colors:
    print(item['colors'] , item['values'])

############################################################
data = {
    'Sales': {
        'North': {
            'Alice': 'Manager',
            'Bob': 'Sales Executive',
            'Eve': 'Sales Coordinator',
            'John': 'Account Manager'
        },
        'South': {
            'Charlie': 'Sales Executive',
            'Grace': 'Regional Sales Manager',
            'Mallory': 'Business Development Associate'
        },
        'West': {
            'Oscar': 'Sales Executive',
            'Peggy': 'Account Executive',
            'Victor': 'Territory Sales Manager'
        }
    },
    'Marketing': {
        'Digital': {
            'David': 'SEO Specialist',
            'Hannah': 'Content Strategist',
            'Irene': 'Social Media Manager'
        },
        'Offline': {
            'Eve': 'Event Coordinator',
            'Jake': 'Brand Manager',
            'Liam': 'Public Relations Specialist'
        },
        'Research': {
            'Mia': 'Market Research Analyst',
            'Noah': 'Customer Insights Manager'
        }
    },
    'IT': {
        'Infrastructure': {
            'Quinn': 'Network Engineer',
            'Riley': 'System Administrator',
            'Sam': 'Cloud Architect'
        },
        'Development': {
            'Tina': 'Software Engineer',
            'Uma': 'Backend Developer',
            'Walter': 'Full Stack Developer'
        }
    },
    'HR': {
        'Recruitment': {
            'Yara': 'Recruitment Specialist',
            'Zane': 'Talent Acquisition Manager',
            'Nina': 'HR Coordinator'
        },
        'Employee Relations': {
            'Oliver': 'Employee Relations Specialist',
            'Sophia': 'HR Business Partner'
        }
    },
    'Finance': {
        'Accounting': {
            'Xander': 'Accountant',
            'Yvette': 'Accounts Payable Specialist',
            'Zara': 'Financial Analyst'
        },
        'Audit': {
            'Luna': 'Internal Auditor',
            'Mason': 'Compliance Officer'
        }
    }
}


write a program to display the below output:


Sales
-----
North
South
West


Marketing
--------
Digital
Offline
Research


IT
---
Infrasturcture
Development

HR
---
Recruitment
Employee Relations



for key,value in data.items():
    print(key)
    print("--------")
    for skey in value.keys():
        print(skey)
    print()


############################################################

write a program to display the below output


192.168.0.1
192.168.0.2
192.168.0.3
..
..
..
192.168.0.100



# 1st method
ip = "192.168.0.{}"
for val in range(1,101):
    print(ip.format(val))




#2nd method
ip = "192.168.0."
for val in range(1,101):
    finalip = ip + str(val)
    print(finalip)


############################################################

write a program to display the below output


192.168.0.1
192.168.0.2
192.168.0.3
..
..
.. 192.168.0.100
192.168.1.1
192.168.1.2
192.168.1.3
..
..
..
192.168.1.100



#pythonic way
ip = "192.168.{}.{}"
for val in range(0,2):
    for ival in range(1,101):
        finalip = ip.format(val,ival)
        print(finalip)



# 2nd method
ip = "192.168."
for val in range(0,2):
    ipaddress = ip + str(val)
    for ival in range(1,101):
        finalip = ipaddress + "." + str(ival)
        print(finalip)


############################################################

info = {
"id": "0001",
"type": "donut",
"name": "Cake",
"image":
{
"url": "images/0001.jpg",
"width": 200,
"height": 200
},
"thumbnail":
{
"url": "images/thumbnails/0001.jpg",
"width": 32,
"height": 32
}
}


sample output:

ID              : 0001
TYPE            : donut
NAME            : Cake
IMAGE URL       :"images/0001.jpg
IMAGE WIDTH     : 200
IMAGE HEIGHT    : 200
THUMBNAIL URL   : "images/thumbnails/0001.jpg"
THUMBNAIL WIDTH : 32
THUMBNAIL HEIGHT:  32




for key,value in info.items():
    if isinstance(value,str):
        print(key.upper().ljust(20),":",value)
    elif isinstance(value,dict):
        for skey,svalue in value.items():
            finalkey = key + " " + skey
            print(finalkey.upper().ljust(20),":",svalue)
############################################################



############################################################
####### file handling ########





functions
----------
- builtin functions
- user defined functions



builtin functions
------------------
print()
len()
range()
type()
isinstance()
input()
max()
min()
sum()

typecasting functions - converting from one object to another object
str()
int()
float()
list()
tuple()
dict()
set()



If you want to display all the builtin functions

print(dir(__builtins__))




file handling
---------------
txt
csv
xlsx
json
jpeg
bmp
mp3
mp4
dat
mkv
pdf
pptx
docx
zip
rar
7z
tar
tar.gz
jar
ser 
.sas
pmml


working in flat files ( txt csv json conf log xml )
- dont require any libraries to work with flat files

working with third party files ( pdf  xlsx docx pptx zip 7z )
- we need a library to work with third party files


#include<stdio.h>
#include<conio.h>
#include<math.h>
#include<regex.h>
#include<graphics.h>

count of libraries in python ?
-------------------------
6L+


working with flat files
-----------------------
read mode ( r)
write mode ( w )
append mode ( a)

opening file
-------------
syntax:   object = open(filename,mode)
example:    fobj = open("customers.txt","r")  # read mode
            **** the file should exist ****

            fobj = open("customers.txt","w")  # write mode
            ** If the file is not existing ... file gets created first
            ** if the file is already existing... it overwrites the existing

            fobj = open("customers.txt","a")  # append mode
            ** If the file is not existing ... file gets created first
            ** if the file is already existing... it appends the data
            


closing the file
-----------------
fobj.close()


read operation
--------------

- reading the file line by line
- fobj.readlines()
- fobj.read()
- using csv library
- using pandas library




task =  core programming +   sound understanding of libraries + core domain
       ( procedural or
        object oriented)




